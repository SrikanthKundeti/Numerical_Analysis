function[] = CubicSplines(x,y)
% Inputs are arrays x and y.
%The first contition is that a(i) = y(i) for i = 0.....n, as a result:
for i = 1:1:length(y)
    a(i) = y(i);
end
% The width h(i) = x(i+1) - x(i) for n = 0.....(n-1), as a result:
for i = 1:1:(length(x)-1)
    h(i) = x(i+1)-x(i);
end
%Let the Matrix to solve for c be called m.
m(1,1) = 1;
m(length(x),length(x)) = 1;
for i = 2:1:(length(x)-1)
    m(i,i-1) = h(i-1);
    m(i,i) = 2*(h(i)+h(i-1));
    m(i,i+1) = h(i);
end
%solution array is called msol.
msol(1,1) = 0;
msol(length(x),1) = 0;
for i = 2:1:(length(x)-1)
    msol(i,1) = (3/h(i))*(a(i+1)-a(i))-(3/h(i-1))*(a(i)-a(i-1));
end
%Solutions to variable c will be in according vector c.
c(1,1) = 0;
c(length(x),1) = 0;
%inverse of a matrx m is m^(-1) or inv(m);
c = inv(m)*msol;
for i=1:1:length(x)-1
    b(i) = (1/h(i))*(a(i+1)-a(i)) - (h(i)/3)*(2*c(i,1)+c(i+1,1));
    d(i) = (1/(3*h(i)))*(c(i+1)-c(i));
end

%Final Matrix Chart is called PolyTable
for i= 1:1:(length(x)-1)
    PolyTable(i,1) = x(i);
    PolyTable(i,2) = y(i);
    PolyTable(i,3) = a(i);
    PolyTable(i,4) = b(i);
    PolyTable(i,5) = c(i,1);
    PolyTable(i,6) = d(i);
end
disp(PolyTable);
%     %CubicSplines(x,y)
%     1.0000    5.0000    5.0000    1.0144         0   -0.0144
%     2.0000    6.0000    6.0000    0.9713   -0.0431   -0.4282
%     3.0000    6.5000    6.5000   -0.3995   -1.3278    0.7273
%     4.0000    5.5000    5.5000   -0.8732    0.8541    0.0191
%     5.0000    5.5000    5.5000    0.8923    0.9115   -0.3038


%PlotPoly
t = 1:0.01:(length(x)-1);
PlotPoly1 = a(1) + b(1)*(t-x(1)) + c(1,1)*(t-x(1)).^2 + d(1)*(t-x(1)).^3;
PlotPoly2 = a(2) + b(2)*(t-x(2)) + c(2,1)*(t-x(2)).^2 + d(2)*(t-x(2)).^3;
PlotPoly3 = a(3) + b(3)*(t-x(3)) + c(3,1)*(t-x(3)).^2 + d(3)*(t-x(3)).^3;
PlotPoly4 = a(4) + b(4)*(t-x(4)) + c(4,1)*(t-x(4)).^2 + d(4)*(t-x(4)).^3;
PlotPoly5 = a(5) + b(5)*(t-x(5)) + c(5,1)*(t-x(5)).^2 + d(5)*(t-x(5)).^3;

plot(x,y,t,PlotPoly5,t,PlotPoly4,t,PlotPoly3,t,PlotPoly2,t,PlotPoly1);
